{"ast":null,"code":"const handleSearch=async query=>{try{const response=await fetch(\"http://localhost:5000/search\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({query})});if(!response.ok){throw new Error(`HTTP error! Status: ${response.status}`);}const data=await response.json();// Ensure results is always an array\nsetResults(Array.isArray(data.results)?data.results:[]);}catch(error){console.error(\"Error fetching search results:\",error);setResults([]);// Set empty array on error\n}};","map":{"version":3,"names":["handleSearch","query","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","setResults","Array","isArray","results","error","console"],"sources":["D:/Project/self-improving-ai-agent/frontend/src/App.js"],"sourcesContent":["const handleSearch = async (query) => {\r\n    try {\r\n        const response = await fetch(\"http://localhost:5000/search\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ query }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        // Ensure results is always an array\r\n        setResults(Array.isArray(data.results) ? data.results : []);\r\n\r\n    } catch (error) {\r\n        console.error(\"Error fetching search results:\", error);\r\n        setResults([]); // Set empty array on error\r\n    }\r\n};\r\n"],"mappings":"AAAA,KAAM,CAAAA,YAAY,CAAG,KAAO,CAAAC,KAAK,EAAK,CAClC,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,8BAA8B,CAAE,CACzDC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEP,KAAM,CAAC,CAClC,CAAC,CAAC,CAEF,GAAI,CAACC,QAAQ,CAACO,EAAE,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC,CAC7D,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAV,QAAQ,CAACW,IAAI,CAAC,CAAC,CAElC;AACAC,UAAU,CAACC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAACK,OAAO,CAAC,CAAGL,IAAI,CAACK,OAAO,CAAG,EAAE,CAAC,CAE/D,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtDJ,UAAU,CAAC,EAAE,CAAC,CAAE;AACpB,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}